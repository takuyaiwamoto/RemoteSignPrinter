==============================================
DevTool リモートコントローラー テストガイド
==============================================

【セットアップ】
1. 書き手側（remotesign.html）を開く
2. 新しいブラウザタブで管理者側（devtool-controller.html）を開く
3. 両方のWebSocket接続状態を確認

【テスト項目】

■ 基本接続テスト
□ devtool-controller.htmlの接続状態が「接続中」（緑色）になる
□ 書き手側のコンソールで「管理者からのDevTool制御コマンド受信」ログが表示される

■ 設定変更テスト
1. キャンバスサイズ調整
   □ スライダーを動かすと書き手側のキャンバスサイズが変更される
   
2. 背景変更
   □ 各背景ボタンをクリックすると書き手側の背景が変更される
   
3. エフェクト切り替え
   □ チェックボックスのON/OFFで書き手側のエフェクトが切り替わる
   
4. テスト機能
   □ 花火テストボタンで書き手側に花火が表示される
   □ 紙吹雪テストボタンで書き手側に紙吹雪が表示される

■ 全体制御テスト
□ 「すべての設定を送信」ボタンで全設定が一括適用される
□ 「全キャンバスクリア」ボタンで書き手側のキャンバスがクリアされる

【確認事項】
- 書き手側のDevToolは表示したままで動作確認可能
- 管理者側からの設定が優先される
- 複数の書き手がいる場合、全員に同時に適用される

【トラブルシューティング】
- 接続できない場合：WebSocketサーバー（wss://realtime-sign-server-1.onrender.com）の状態確認
- 設定が反映されない場合：ブラウザコンソールでエラーを確認
- バックアップファイルから復元：websocket.js.backup.* を使用

【管理者設定優先システム】
✅ 実装完了！新しい書き手が入室しても管理者設定が維持されます

■ システムの動作
1. 管理者パネルから設定変更すると「管理者モード」が有効化される
2. 新規書き手の初期化時のsendDevSettings()が自動でブロックされる
3. 管理者設定がキャッシュされ、優先的に適用される

■ 優先システムのテスト手順
1. 管理者パネルでキャンバススケールを「2.0」に設定
2. 新しいタブで書き手側（remotesign.html）を開く
3. コンソールで「🎮 管理者設定が有効のため、通常のDev設定送信をスキップ」が表示される
4. キャンバススケールが2.0のまま維持される（1.4にリセットされない）

■ バックアップファイル
- websocket.js.backup.20250904_222029
- settings.js.backup.20250904_222050
（問題があれば、これらのファイルから復元可能）

【次のステップ】
段階的に書き手側のDevToolボタンを非表示にしていく予定